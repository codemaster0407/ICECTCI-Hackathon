[
    {
        "question": "data_loc = os.path.join('data', 'datasets', data_code + '.hdf5') data = h5py.File(data_loc, 'r') By the way I am using Window 10 x64 I am getting error while I run python train.py fcn_rffc4 brats_fold0 brats_fold0 600 -ch False command Error is shortly, IOError Unable to open file.... beacuse 'no such file or directory' Long error that I got is : Traceback (most recent call last): File \"train.py\", line 305, in start_training(model_code, data_code, checkpoint, max_passes=n_epochs, train_dir=train_dir) File \"train.py\", line 273, in start_training coach, model_def = setup_training(model_code, data_code, checkpoint, max_passes) File \"train.py\", line 140, in setup_training train, valid, test = retrieve_data(data_code=data_code) File \"train.py\", line 57, in retrieve_data data = h5py.File(data_loc, 'r') File \"C:\\Users\\yunus\\Anaconda3\\envs\\medical_image\\lib\\site-packages\\h5py_hl\\files.py\", line 271, in init fid = make_fid(name, mode, userblock_size, fapl, swmr=swmr) File \"C:\\Users\\yunus\\Anaconda3\\envs\\medical_image\\lib\\site-packages\\h5py_hl\\files.py\", line 101, in make_fid fid = h5f.open(name, flags, fapl=fapl) File \"h5py_objects.pyx\", line 54, in h5py._objects.with_phil.wrapper File \"h5py_objects.pyx\", line 55, in h5py._objects.with_phil.wrapper File \"h5py\\h5f.pyx\", line 78, in h5py.h5f.open IOError: Unable to open file (Unable to open file: name = 'data\\datasets\\brats_fold0.hdf5', errno = 2, error message = 'no such file or directory', flags = 0, o_flags = 0)",
        "answers": [],
        "votes": []
    },
    {
        "question": "I have been trying to install cudamat on a Ubuntu 18.04 machine. Cuda toolkit has been installed (with a work-around, surprisingly NVIDIA hasn't provided support yet.) But now when I try importing cudamat, the following error pops up, OSError: cudamat/libcudamat.so: cannot open shared object file: No such file or directory Possible work-around for this has to be setting the correct path? That is were I am stuck at the moment. I am running a python 2.7 version but I also have python3 with the anaconda install, has this in someway messed up my path. Because when I run the PATH command from the setup.py file for cudamat I get the following PATH print(os.environ.get('PATH')) /usr/local/cuda-9.2/bin:/home/rahul/anaconda3/bin:/home/rahul/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/local/cuda/bin If there is a fix, please let me know. Thanks in advance. Edit1: I believe the error might also be due to CUDA path and not CUDAmat? I would like to know if this is a valid claim.",
        "answers": [
            [
                "cudamat contains library functions written in CUDA C and expose them through python via it's C interface(python's interpreter is implemented in C). So they compile the CUDA C code into a shared library which is libcudamat.so. The solution might be trying to install from source. The instruction in their repo works fine. Edit1: I believe the error might also be due to CUDA path and not CUDAmat? I would like to know if this is a valid claim. Not necessarily, check your installation again. I would recommend installing from source."
            ]
        ],
        "votes": [
            1e-07
        ]
    },
    {
        "question": "I'm trying to compile cudamat in my Windows 10, by using VS2015 x64 native tools command prompt. I've already installed Cuda toolkit 8 as well as Visual Studio 2015 with MSVC compiler. After downloading cudamat, I gave the following command in that directory: python setup.py install When it tries to build cudamat.libcudamat extension, I get the following error by the linker: fatal error lnk1181: cannot open input file 'id=2.obj' error: command 'C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\bin\\nvcc.exe' failed with exit status 2 Could someone help me?",
        "answers": [
            [
                "If you have this problem, we can assume that earlier compilation of cudamat.obj and cudamat_kernels.obj were succesful. To make it work, you'll have to do it manually as described here. Long in short: First you have to go to directory where you have Cudamat downloaded (git clone https://github.com/cudamat/cudamat.git). Copy cudamat folder (the one where you can find cudamat.py, learn.py and init.py) to your python site-packages folder (you can check the path using python -c \"import sys; print(sys.path)\") Now you will have to go to this folder and compile dll's manually. To do this you have to execute few commands: nvcc -c -O -o cudamat.obj cudamat.cu nvcc -c -O -o cudamat_kernels.obj cudamat_kernels.cu nvcc --shared -o libcudamat.dll cudamat.obj cudamat_kernels.obj -lcublas and then repeat the process changing cudamat to learn and libcudamat.dll to libcudalearn.dll This should already work but if not, you have to tweak your python paths so it can see your new library Alternatively, you can try also: pip install http://github.com/f0k/cudamat/archive/simplify-compile.zip"
            ]
        ],
        "votes": [
            5.0000001
        ]
    },
    {
        "question": "I have a programm that uses np.random many times. Now I wan't the user to pass an argument gpu=True/False. How can I override np.random to return cm.CUDAMatrix(np.random.uniform(low=low, high=high, size=size)) without ending in a recursion? Or is there a better way to use cudamat with small code changes? Thanks for your help. If you need more code please comment. class FeedForwardNetwork(): def __init__(self, input_dim, hidden_dim, output_dim, dropout=False, dropout_prop=0.5, gpu=True): np.random.seed(1) self.input_layer = np.array([]) self.hidden_layer = np.array([]) self.output_layer = np.array([]) self.input_dim = input_dim self.hidden_dim = hidden_dim self.output_dim = output_dim self.dropout = dropout self.dropout_prop = dropout_prop r_input_hidden = math.sqrt(6 / (input_dim + hidden_dim)) r_hidden_output = math.sqrt(6 / (hidden_dim + output_dim)) self.weights_input_hidden = np.random.uniform(low=-0.01, high=0.01, size=(input_dim, hidden_dim)) self.weights_hidden_output = np.random.uniform(low=-0.01, high=0.01, size=(hidden_dim, output_dim))",
        "answers": [
            [
                "class FeedForwardNetwork(): def __init__(self, input_dim, hidden_dim, output_dim, dropout=False, dropout_prop=0.5, gpu=True): np.random.seed(1) self.input_layer = np.array([]) self.hidden_layer = np.array([]) self.output_layer = np.array([]) self.input_dim = input_dim self.hidden_dim = hidden_dim self.output_dim = output_dim self.dropout = dropout self.dropout_prop = dropout_prop r_input_hidden = math.sqrt(6 / (input_dim + hidden_dim)) r_hidden_output = math.sqrt(6 / (hidden_dim + output_dim)) self.weights_input_hidden = np.random.uniform(low=-0.01, high=0.01, size=(input_dim, hidden_dim)) self.weights_hidden_output = np.random.uniform(low=-0.01, high=0.01, size=(hidden_dim, output_dim)) def np_random(self, gpu): '''gpu:bool''' if gpu: return np.random.uniform(low=-0.01, high=0.01, size=(self.input_dim, self.hidden_dim)) else: return np.random.uniform(low=-0.01, high=0.01, size=(self.hidden_dim, self.output_dim)) Then you can call it from your instance: instance = FeedForwardNetwork(**kwargs) instance.np_random(True/False)"
            ]
        ],
        "votes": [
            1.0000001
        ]
    },
    {
        "question": "I'm trying to install cudamat, on an Ubuntu 14.04 EC2 instance with Cuda installed. The install script fails with \"unable to execute 'nvcc': No such file or directory\". I added a line to echo the environment variable $PATH, which doesn't have the shell variables that were previously exported: (deeplearning) ubuntu@ip-x-x-x-x:~/cudamat$ sudo python setup.py install /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin running install running bdist_egg running egg_info writing cudamat.egg-info/PKG-INFO writing top-level names to cudamat.egg-info/top_level.txt writing dependency_links to cudamat.egg-info/dependency_links.txt reading manifest file 'cudamat.egg-info/SOURCES.txt' writing manifest file 'cudamat.egg-info/SOURCES.txt' installing library code to build/bdist.linux-x86_64/egg running install_lib running build_py running build_ext building 'cudamat.libcudamat' extension nvcc -I/usr/include/python2.7 -c cudamat/cudamat.cu -o build/temp.linux-x86_64-2.7/cudamat/cudamat.o -O --ptxas-options=-v --compiler-options=-fPIC unable to execute 'nvcc': No such file or directory error: command 'nvcc' failed with exit status 1 In case anyone is curious, here is the export command from .bashrc: export PATH=/usr/local/cuda-7.5/bin:/home/ubuntu/.virtualenvs/deeplearning/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games export LD_LIBRARY_PATH=/usr/local/cuda-7.5/lib64: I verified that my path is set: (deeplearning) ubuntu@ip-x-x-x-x:~/cudamat$ env LD_LIBRARY_PATH=/usr/local/cuda-7.5/lib64 PATH=/home/ubuntu/.virtualenvs/deeplearning/bin:/usr/local/cuda-7.5/bin:/home/ubuntu/.virtualenvs/deeplearning/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games",
        "answers": [],
        "votes": []
    }
]