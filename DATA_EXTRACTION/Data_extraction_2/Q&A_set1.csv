,Question,Answer
0,What is Kit?,"Kit is a platform for building applications and experiences. They may or may not have much in common. Some of these may use RTX, omni.ui, or other libraries to create rich applications, while others may be cut-down windowless services."
1,What is the main goal of Kit?,"The main goal of Kit is to be extremely modular, where everything is an extension."
2,What is an Extension in Kit?,"An Extension is a uniquely named and versioned package loaded at runtime. It can contain python code, shared libraries, and/or Carbonite plugins. It provides a C++ API and a python API. Extensions can depend on other extensions and can be reloadable, meaning they can be unloaded, changed, and loaded again at runtime."
3,How does an Extension contribute to Kit-based Applications?,"An Extension is the basic building block of Kit-based Applications like Create, as it provides the necessary functionality and features to enhance the applications."
4,What is the Kit Kernel (kit.exe/IApp)?,"The Kit Kernel, also known as kit.exe/IApp, is a minimal core required to run an extension. It acts as an entry point for any Kit-based Application and includes the extension manager and basic interface, serving as the core that holds everything together."
5,What does the Kit Kernel include?,The Kit Kernel includes the extension manager and a basic interface that allows extensions to interact with the core functionalities of the Kit-based Application.
6,What does omni.kit.app (omni::kit::IApp) contain?,"omni.kit.app is a basic interface that can be used by any extension. It provides a minimal set of Carbonite plugins to load and set up extensions. It contains Carbonite framework startup, the extension manager, event system, update loop, settings, and a Python context/runtime."
7,What are the programming language options to interact with omni.kit.app?,omni.kit.app can be used with C++ using omni::kit::IApp or with Python using omni.kit.app.
8,What are Bundled Extensions in the Kit SDK?,Bundled Extensions are included extensions that come with the Kit SDK. They provide additional functionalities for the Kit platform.
9,Where can other extensions be found?,Other extensions can be developed outside of the Kit SDK and delivered using the Extension Registry.
10,What are Different Modes Example?,Different Modes Example shows different scenarios of using Kit-based Applications with various extensions and dependencies.
11,What are the different dependencies shown in the GUI CLI utility mode?,"In the GUI CLI utility mode, the dependencies include omni.kit.rendering, omni.kit.window, omni.kit.ui, omni.kit.usd, omni.kit.connection, and user.tool.ui."
12,What is a Kit file?,"A Kit file (ends in .kit) defines an Omniverse App. It behaves as a single-file extension and can be published, downloaded, versioned, and have dependencies."
13,How do you build an Omniverse App using a Kit file?,Building an Omniverse App is as simple as listing the extensions it should contain (extension dependencies) and the default settings to apply in the Kit file.
14,What is an example of a simple app in Kit?,"An example of a very simple app in Kit is the 'repl.kit' file, which includes a dependency and a setting applied to the 'omni.kit.console' extension."
15,What will the Kit executable do when passed the 'repl.kit' file?,"When you pass the 'repl.kit' file to the Kit executable using the command 'kit.exe repl.kit', it will enable a few extensions (including dependencies) to run a simple REPL."
16,What are the conceptual differences between specifying dependencies for an extension and an app?,"For extensions, dependencies are specified broadly to describe compatibility with other extensions. An extension can be used in various apps with different extensions included. For an app, all versions of dependencies must be locked in the final package to guarantee reproducible builds for end users and developers."
17,How does Kit resolve extension versions when running an app?,"When running an app, Kit will first resolve all extension versions, either locally or using the registry system, and then enable the latest compatible versions. Subsequent runs of the app may result in different versions being enabled if newer versions have been published."
18,What is the purpose of the repo tool 'repo_precache_exts'?,The 'repo_precache_exts' tool is used to lock the versions of all extensions required by an app and also download/precache them. It is run as the final step of the build process to package the extensions together with the app for deployment.
19,What happens when the 'repo_precache_exts' tool is run with the '-u' or '--update' flag?,"When the 'repo_precache_exts' tool is run with the '-u' or '--update' flag, it removes the generated part of the kit file, cleans the cache path, and then reruns the extension precaching process to update the version lock."
20,What are the version specification recommendations for apps in Kit?,"The general advice is to write the dependencies required-versions for apps the same way as for extensions, in an open-ended form. For example, you can specify dependencies without a specific version or lock them to a major version while allowing minor updates."
21,What happens when an extension is specified as exact in the version lock?,Extensions specified as exact in the version lock are not automatically updated by the version lock process. This allows you to manually lock the version for a specific platform or purpose.
22,How is an app deployed in Omniverse Launcher?,"An app in Omniverse Launcher is composed of one or more Kit files, precached extensions, and the Kit SDK. It can be run by anyone who has access to the Kit file and can be shared as a file for easy distribution."
23,What is the goal for deploying apps in Omniverse Launcher?,"The goal is to have a single Kit file that defines an Omniverse App of any complexity, which can be published, versioned, and easily shared with others, simplifying the deployment process."
24,What is exts.deps.generated.kit?,exts.deps.generated.kit is an app that contains all extensions from the repository as dependencies. It is used to lock all versions of their dependencies and precache them before building.
25,How is the exts.deps.generated.kit file regenerated?,"The exts.deps.generated.kit file is regenerated if any extension is added, removed, or if any extension version is updated in the repository."
26,What is a Kit file?,"A Kit file (ends in .kit) defines an Omniverse App. It behaves as a single-file extension and can be published, downloaded, versioned, and have dependencies."
27,How do you build an Omniverse App using a Kit file?,Building an Omniverse App is as simple as listing the extensions it should contain (extension dependencies) and the default settings to apply in the Kit file.
28,What is an example of a simple app in Kit?,"An example of a very simple app in Kit is the 'repl.kit' file, which includes a dependency and a setting applied to the 'omni.kit.console' extension."
29,What will the Kit executable do when passed the 'repl.kit' file?,"When you pass the 'repl.kit' file to the Kit executable using the command 'kit.exe repl.kit', it will enable a few extensions (including dependencies) to run a simple REPL."
30,What are the conceptual differences between specifying dependencies for an extension and an app?,"For extensions, dependencies are specified broadly to describe compatibility with other extensions. An extension can be used in various apps with different extensions included. For an app, all versions of dependencies must be locked in the final package to guarantee reproducible builds for end users and developers."
31,How does Kit resolve extension versions when running an app?,"When running an app, Kit will first resolve all extension versions, either locally or using the registry system, and then enable the latest compatible versions. Subsequent runs of the app may result in different versions being enabled if newer versions have been published."
32,What is the purpose of the repo tool 'repo_precache_exts'?,The 'repo_precache_exts' tool is used to lock the versions of all extensions required by an app and also download/precache them. It is run as the final step of the build process to package the extensions together with the app for deployment.
33,What are the version specification recommendations for apps in Kit?,"The general advice is to write the dependencies required-versions for apps the same way as for extensions, in an open-ended form. For example, you can specify dependencies without a specific version or lock them to a major version while allowing minor updates."
34,What happens when an extension is specified as exact in the version lock?,Extensions specified as exact in the version lock are not automatically updated by the version lock process. This allows you to manually lock the version for a specific platform or purpose.
35,How is an app deployed in Omniverse Launcher?,"An app in Omniverse Launcher is composed of one or more Kit files, precached extensions, and the Kit SDK. It can be run by anyone who has access to the Kit file and can be shared as a file for easy distribution."
36,What is the goal for deploying apps in Omniverse Launcher?,"The goal is to have a single Kit file that defines an Omniverse App of any complexity, which can be published, versioned, and easily shared with others, simplifying the deployment process."
37,What is exts.deps.generated.kit?,exts.deps.generated.kit is an app that contains all extensions from the repository as dependencies. It is used to lock all versions of their dependencies and precache them before building.
38,How is the exts.deps.generated.kit file regenerated?,"The exts.deps.generated.kit file is regenerated if any extension is added, removed, or if any extension version is updated in the repository."
39,What is the purpose of the Kit configuration system?,"The Kit configuration system is based on Carbonite settings and provides a runtime representation of configuration formats like json, toml, and xml. It is a nested dictionary of values used to configure various aspects of Kit-based applications."
40,How do you start Kit without loading any app file?,"To start Kit without loading any app file, you can run 'kit.exe' without any arguments. It will start Kit and exit without enabling any extensions or applying any configuration, except for the built-in config: kit-core.json."
41,What is the purpose of the '--/app/printConfig=true' flag?,"The '--/app/printConfig=true' flag is used to print all settings in the Kit configuration. It allows users to see the complete configuration, including any settings applied from the command line or configuration files."
42,What is the use of the '-v' and '-vv' flags when starting Kit?,"The '-v' flag is used to enable info logging, and '-vv' is used to enable verbose logging. These flags provide different levels of logging information in the console, making it easier to debug and troubleshoot the startup routine."
43,How can you enable extensions when starting Kit?,"You can enable extensions when starting Kit by using the '--enable' flag followed by the name of the extension. For example, 'kit.exe --enable omni.kit.window.script_editor' will enable the 'omni.kit.window.script_editor' extension."
44,How can you add more folders to search for extensions?,"You can add more folders to search for extensions using the '--ext-folder' flag followed by the path to the folder containing the extensions. For example, 'kit.exe --enable omni.kit.window.script_editor --ext-folder ./exts --enable foo.bar' will enable the specified extensions and search for additional extensions in the './exts' folder."
45,What is a Kit file and how is it used?,"A Kit file is the recommended way to configure applications in Kit. It is a single-file extension, similar to an extension.toml file, that defines settings for an application. It can be named, versioned, and even published to the registry like any other extension."
46,How can you define dependencies for a Kit file?,"Dependencies for a Kit file are defined in the '[dependencies]' section using the format 'extension_name = {}'. For example, '[dependencies]
""omni.kit.window.script_editor"" = {}' defines a dependency on the 'omni.kit.window.script_editor' extension."
47,What is NVIDIA Omniverse? Explain briefly,"NVIDIA Omniverse is an extensible platform for virtual collaboration and real-time, physically accurate simulation. Creators, designers, researchers, and engineers can connect tools, assets, and projects to collaborate in a shared virtual space. Developers and software providers can also build and sell Omniverse Extensions, Applications, Connectors, and Microservices on the Omniverse platform to expand its functionality.Omniverse is designed for maximum flexibility and scalability."
48,How do you use the special '++' key to append values to arrays?,"The '++' key is used to append values to arrays instead of overriding them. For example, to add additional extension folders to the '/app/exts/folders' setting, you can use: '[app.exts]
folders.""++"" = [""c:/temp""]'. This adds the 'c:/temp' folder to the list of extension folders."
49,How can you run Kit in portable mode?,"To run Kit in portable mode, you can use the '--portable' flag. Optionally, you can specify the location of the portable root using the '--portable-root [path]' flag. This mode is useful for developers and allows the use of a specific folder as the root for data, cache, logs, etc."
50,How can you change settings using the command line?,"You can change settings using the command line by adding the '--/' prefix followed by the path to the setting and the new value. For example, to change the value of 'ignoreUnsavedOnExit' to true, you can use the command 'kit.exe --/app/file/ignoreUnsavedOnExit=true'."
51,What is the purpose of the '/app/enableStdoutOutput' setting?,"The '/app/enableStdoutOutput' setting is used to enable or disable kernel standard output in Kit. When enabled, it allows extension standard output to be displayed when the extension starts."
52,What is the purpose of the '/app/settings/persistent' setting?,"The '/app/settings/persistent' setting enables saving persistent settings (user.config.json) between sessions. It automatically saves changed persistent settings in the '/persistent' namespace each frame, allowing them to persist across app restarts."
53,What is the purpose of the Kit configuration system?,"The Kit configuration system is based on Carbonite settings and provides a runtime representation of configuration formats like json, toml, and xml. It is a nested dictionary of values used to configure various aspects of Kit-based applications."
54,How do you start Kit without loading any app file?,"To start Kit without loading any app file, you can run 'kit.exe' without any arguments. It will start Kit and exit without enabling any extensions or applying any configuration, except for the built-in config: kit-core.json."
55,What is the purpose of the '--/app/printConfig=true' flag?,"The '--/app/printConfig=true' flag is used to print all settings in the Kit configuration. It allows users to see the complete configuration, including any settings applied from the command line or configuration files."
56,What is the use of the '-v' and '-vv' flags when starting Kit?,"The '-v' flag is used to enable info logging, and '-vv' is used to enable verbose logging. These flags provide different levels of logging information in the console, making it easier to debug and troubleshoot the startup routine."
57,How can you enable extensions when starting Kit?,"You can enable extensions when starting Kit by using the '--enable' flag followed by the name of the extension. For example, 'kit.exe --enable omni.kit.window.script_editor' will enable the 'omni.kit.window.script_editor' extension."
58,How can you add more folders to search for extensions?,"You can add more folders to search for extensions using the '--ext-folder' flag followed by the path to the folder containing the extensions. For example, 'kit.exe --enable omni.kit.window.script_editor --ext-folder ./exts --enable foo.bar' will enable the specified extensions and search for additional extensions in the './exts' folder."
59,What is a Kit file and how is it used?,"A Kit file is the recommended way to configure applications in Kit. It is a single-file extension, similar to an extension.toml file, that defines settings for an application. It can be named, versioned, and even published to the registry like any other extension."
60,How can you define dependencies for a Kit file?,"Dependencies for a Kit file are defined in the '[dependencies]' section using the format 'extension_name = {}'. For example, '[dependencies]
""omni.kit.window.script_editor"" = {}' defines a dependency on the 'omni.kit.window.script_editor' extension."
61,How do you use the special '++' key to append values to arrays?,"The '++' key is used to append values to arrays instead of overriding them. For example, to add additional extension folders to the '/app/exts/folders' setting, you can use: '[app.exts]
folders.""++"" = [""c:/temp""]'. This adds the 'c:/temp' folder to the list of extension folders."
62,How can you run Kit in portable mode?,"To run Kit in portable mode, you can use the '--portable' flag. Optionally, you can specify the location of the portable root using the '--portable-root [path]' flag. This mode is useful for developers and allows the use of a specific folder as the root for data, cache, logs, etc."
63,How can you change settings using the command line?,"You can change settings using the command line by adding the '--/' prefix followed by the path to the setting and the new value. For example, to change the value of 'ignoreUnsavedOnExit' to true, you can use the command 'kit.exe --/app/file/ignoreUnsavedOnExit=true'."
64,What is the purpose of the '/app/enableStdoutOutput' setting?,"The '/app/enableStdoutOutput' setting is used to enable or disable kernel standard output in Kit. When enabled, it allows extension standard output to be displayed when the extension starts."
65,What is the purpose of the '/app/settings/persistent' setting?,"The '/app/settings/persistent' setting enables saving persistent settings (user.config.json) between sessions. It automatically saves changed persistent settings in the '/persistent' namespace each frame, allowing them to persist across app restarts."
66,What is the purpose of the '/app/hangDetector/timeout' setting?,"The '/app/hangDetector/timeout' setting is used to specify the hang detector timeout in seconds. If the hang detector is enabled and an extension takes longer than the specified timeout to execute, it triggers a hang detection."
67,How can you set a numeric value using the command line?,"To set a numeric value using the command line, you can simply add the '--/path/to/setting=value' flag, where 'value' is the desired numeric value. For example, 'kit.exe --/some/number=7' will set the 'some/number' setting to 7."
68,What is the purpose of the '/app/quitAfter' setting?,"The '/app/quitAfter' setting is used to automatically quit the app after a specified number of frames. If the value is positive, the app will quit after the specified number of frames have been rendered."
69,How can you specify a boolean value using the command line?,"To specify a boolean value using the command line, you can use either 'true' or 'false' strings. For example, 'kit.exe --/some/path/to/parameter=false' or 'kit.exe --/some/path/to/parameter=true' will set the 'some/path/to/parameter' setting to false or true, respectively."
70,What is the purpose of the '/app/fastShutdown' setting?,"The '/app/fastShutdown' setting, when enabled, allows the app to perform a fast shutdown instead of the full extension shutdown flow. Only subscribers to the IApp shutdown event will handle the shutdown, and the app will terminate quickly."
71,What is the purpose of the '/app/python/logSysStdOutput' setting?,The '/app/python/logSysStdOutput' setting intercepts and logs all Python standard output in the Carb logger at the info level. This allows users to monitor and log Python standard output messages in the Kit application.
72,What are the two ways to modify behavior in the system?,The two ways to modify behavior in the system are via the designated API function call and by changing the corresponding setting.
73,What is one way to reconcile the use of API function calls and settings?,"One way to reconcile the use of API function calls and settings is to ensure that API functions only change settings, and the core logic tracks settings changes and reacts to them."
74,What is the purpose of the settings subsystem?,"The settings subsystem provides a simple to use interface to Kit's various subsystems, allowing automation, enumeration, serialization, and more. It is accessible from both C++ and Python bindings."
75,What is the relationship between the settings subsystem and carb.dictionary?,The settings subsystem uses carb.dictionary under the hood to work with dictionary data structures. It effectively acts as a singleton dictionary with a specialized API to streamline access.
76,Why is it recommended to set default values for settings?,Setting default values for settings ensures that there is always a value available when accessing a setting. It helps avoid errors when reading settings with no value.
77,How can you efficiently monitor settings changes?,"To efficiently monitor settings changes, it is recommended to use notifications instead of directly polling for settings. Subscribing to notifications helps avoid unnecessary access to the settings backend when the value didn't change."
78,What is the purpose of the '/app/rendering/enabled' setting?,"The '/app/rendering/enabled' setting is intended to be easily tweakable, serializable, and human-readable. It allows enabling or disabling rendering functionality in the application."
79,What is the recommended approach for reacting to settings changes?,"Ideally, settings should be monitored for changes, and plugins/extensions should react to the changes accordingly. If exceptions arise where the behavior won't be affected, users should be informed about the setting changes."
80,How can the API and settings be reconciled?,"One way to reconcile the API and settings is by ensuring that API functions only modify corresponding settings. The core logic should track settings changes and react to them, avoiding direct changes to the core logic value when a corresponding setting value is present."
81,Why is it important to avoid direct changes to the core logic value?,"Avoiding direct changes to the core logic value when a corresponding setting value is present ensures that the value stored in the core logic and the corresponding setting value are always in sync, preventing inconsistencies."
82,What is the purpose of the carb.settings namespace in Python?,The carb.settings namespace in Python provides a simple to use interface to Kit's Settings subsystem. It allows easy access to settings from both C++ and scripting bindings like Python.
83,How does the carb.dictionary subsystem relate to the Settings subsystem?,The carb.dictionary subsystem is used under the hood by the Settings subsystem. It effectively acts as a singleton dictionary with a specialized API to streamline access to settings.
84,Why is it important to set default values for settings?,Setting default values for settings ensures that there is always a valid value available when accessing a setting. It helps prevent errors when reading settings without a value.
85,How can you efficiently monitor changes in settings?,"To efficiently monitor changes in settings, it is recommended to use notifications instead of polling for settings. Subscribing to notifications helps avoid unnecessary access to the settings backend when the value remains unchanged."
86,What is the purpose of the '/app/rendering/enabled' setting?,"The '/app/rendering/enabled' setting is intended to be easily tweakable, serializable, and human-readable. It allows users to enable or disable rendering functionality in the application."
87,What is the recommended approach for reacting to settings changes?,"The recommended approach for reacting to settings changes is to monitor settings for changes and have plugins/extensions react accordingly. If a change won't affect behavior, users should still be informed about the setting changes."
88,How can the API and settings be effectively reconciled?,"One effective way to reconcile the API and settings is to ensure that API functions only modify corresponding settings. The core logic should track settings changes and respond to them, avoiding direct changes to the core logic value when a corresponding setting value is present."
89,Why is it important to avoid direct changes to the core logic value?,"Avoiding direct changes to the core logic value when a corresponding setting value is present ensures that the value stored in the core logic and the corresponding setting value are always in sync, preventing inconsistencies."
90,How can the API documentation be built for the repo?,"To build the API documentation, you can run 'repo.{sh|bat} docs'. To automatically open the resulting docs in the browser, add the '-o' flag. You can also use the '--project' flag to specify a specific project to generate the docs for."
91,What is the purpose of the carb.settings namespace in Python?,The carb.settings namespace in Python provides a simple to use interface to Kit's Settings subsystem. It allows easy access to settings from both C++ and scripting bindings like Python.
92,How can you efficiently monitor changes in settings?,"To efficiently monitor changes in settings, it is recommended to use notifications instead of polling for settings. Subscribing to notifications helps avoid unnecessary access to the settings backend when the value remains unchanged."
93,What is the purpose of the '/app/rendering/enabled' setting?,"The '/app/rendering/enabled' setting is intended to be easily tweakable, serializable, and human-readable. It allows users to enable or disable rendering functionality in the application."
94,How can the API and settings be effectively reconciled?,"One effective way to reconcile the API and settings is to ensure that API functions only modify corresponding settings. The core logic should track settings changes and respond to them, avoiding direct changes to the core logic value when a corresponding setting value is present."
95,Why is it important to avoid direct changes to the core logic value?,"Avoiding direct changes to the core logic value when a corresponding setting value is present ensures that the value stored in the core logic and the corresponding setting value are always in sync, preventing inconsistencies."
96,What is the best way to document Python API?,"The best way to document Python API is to use Python Docstring format (Google Python Style Docstring). This involves providing one-liner descriptions, more detailed behavior explanations, Args and Returns sections, all while utilizing Python type hints."
97,What approach should be taken for documenting C++ code that is exposed to Python using pybind11?,"For documenting C++ code exposed to Python via pybind11, the same Google Python Style Docstring format should be used. The pybind11 library automatically generates type information based on C++ types, and py::arg objects must be used to properly name arguments in the function signature."
98,How can Sphinx warnings be dealt with during the documentation process?,"To address Sphinx warnings, it is crucial to fix issues with MyST-parser warnings, docstring syntax, and C++ docstring problems. Properly managing __all__ in Python modules helps control which members are inspected and documented. Also, ensuring consistent indentation and whitespace in docstrings is essential."
99,What are some common sources of docstring syntax warnings?,"Common sources of docstring syntax warnings include indentation or whitespace mismatches in docstrings, improper usage or lack of newlines where required, and usage of asterisks or backticks in C++ docstrings."
100,How can API extensions be added to the automatic-introspection documentation system?,"To add API extensions to the automatic-introspection documentation system, you need to opt-in the extension to the new system. This involves adding the extension to the list of extensions, providing an Overview.md file in the appropriate folder, and adding markdown files to the extension.toml configuration file."
101,Why is it important to properly manage __all__ in Python modules?,"Managing __all__ in Python modules helps control which objects are imported when using 'from module import *' syntax. This improves documentation generation speed, prevents unwanted autosummary stubs, optimizes import-time, unclutters imported namespaces, and reduces duplicate object Sphinx warnings."
102,What is the purpose of the 'deps' section in the extension.toml configuration file?,The 'deps' section in the extension.toml file specifies extension dependencies and links or Sphinx ref-targets to existing projects. It allows the documentation system to resolve type references and generate proper links to other objects that are part of the documentation.
103,How are asterisks and backticks handled in C++ docstrings?,"In C++ docstrings, asterisks and backticks are automatically escaped at docstring-parse time, ensuring that they are properly displayed in the documentation and do not cause any formatting issues."
104,What version of Python does the Kit come with?,Regular CPython 3.7 is used with no modifications.
105,What does Kit do before starting any extension?,Kit initializes the Python interpreter before any extension is started.
106,How can extensions add their own folders to sys.path?,Extensions can add their own folders (or subfolders) to the sys.path using [[python.module]] definitions.
107,What entry point into Python code do extensions get?,"By subclassing as IExt, extensions get an entry point into Python code."
108,What is the recommended method to debug most issues related to Python integration?,Examining sys.path at runtime is the most common way to debug most issues.
109,How can you use a system-level Python installation instead of the embedded Python?,"Override PYTHONHOME, e.g.: --/plugins/carb.scripting-python.plugin/pythonHome=""C:\Users\bob\AppData\Local\Programs\Python\Python310""."
110,How can you use other Python packages like numpy or Pillow?,You can use the omni.kit.piparchive extension that comes bundled with Kit or add them to the search path (sys.path).
111,What is the purpose of the omni.kit.pipapi extension?,The omni.kit.pipapi extension allows installation of modules from the pip package manager at runtime.
112,How can you package Python modules into extensions?,"Any Python module, including packages from pip, can be packaged into any extension at build-time."
113,Why do some native Python modules not work in Kit?,Native Python modules might not work in Kit due to issues with finding other libraries or conflicts with already loaded libraries.
114,What plugin covers event streams?,The carb.events plugin covers event streams.
115,Which interface is used to create IEventStream objects?,The singleton IEvents interface is used to create IEventStream objects.
116,What happens when an event is pushed into an event stream?,"The immediate callback is triggered, and the event is stored in the internal event queue."
117,What are the two types of callbacks that event consumers can subscribe to?,Event consumers can subscribe to immediate (push) and deferred (pop) callbacks.
118,How can callbacks be bound to context?,Callbacks are wrapped into IEventListener class that allows for context binding to the subscription.
119,What does the IEvent contain?,"IEvent contains event type, sender id, and custom payload, which is stored as carb.dictionary item."
120,What is the recommended way of using event streams?,"The recommended way is through the deferred callbacks mechanisms, unless using immediate callbacks is absolutely necessary."
121,What can be used to narrow/decrease the number of callback invocations?,Event types can be used to narrow/decrease the number of callback invocations.
122,What are the important design choices for event streams?,Either multiple event streams with fairly limited numbers of event types served by each or one single event stream serving many different event types.
123,What is the use of transient subscriptions?,Transient subscriptions are used to implement deferred-action triggered by some event without subscribing on startup and checking the action queue on each callback trigger.
124,How can you execute your code only on Nth event using transient subscriptions?,"The transient subscription can include a simple counter, so you execute your code only on Nth event, not necessarily on the next one."
125,What is the purpose of the carb::events::IEvents Carbonite interface?,The carb::events::IEvents Carbonite interface is used to provide a means to move data around using the generalized interface in a thread-safe manner and synchronize the logic.
126,How are event consumers able to subscribe to callbacks?,"Subscription functions create the ISubscription class, which usually unsubscribes automatically upon destruction."
127,What are some important recommendations for using the events subsystem?,"The events subsystem is flexible, and there are several recommendations intended to help with frequent use-cases and provide clarifications on specific parts of the events logic."
128,What is the carb.events plugin's goal?,The goal of the carb.events plugin is to provide a means to move data around using the generalized interface in a thread-safe manner and also act as a way to synchronize the logic.
129,What happens when events are popped from the event queue?,"When events are popped from the queue one by one or all at once (pump), deferred callbacks are triggered."
130,What is the purpose of this guide?,This guide helps you get started creating new extensions for Kit based apps and sharing them with others.
131,Where was this guide written and tested?,"While this guide can be followed from any Kit based app with a UI, it was written for and tested in Create."
132,Where can I find more comprehensive documentation on extensions?,"For more comprehensive documentation on what an extension is and how it works, refer to the :doc:Extensions (Advanced) <extensions_advanced>."
133,What is the recommended developer environment for extension creation?,Visual Studio Code is recommended as the main developer environment for the best experience.
134,How can I open the Extension Manager UI?,"To open the Extension Manager UI, go to Window -> Extensions."
135,What should I do to create a new extension project?,"To create a new extension project, press the “Plus” button on the top left, select an empty folder to create a project in, and pick an extension name."
136,What is good practice while naming an extension?,It is good practice to match the extension name with a python module that the extension will contain.
137,What happens when I create a new extension project?,"The selected folder will be prepopulated with a new extension, exts subfolder will be automatically added to extension search paths, app subfolder will be linked (symlink) to the location of your Kit based app, and the folder gets opened in Visual Studio Code, configured, and ready for development."
138,What does the “Gear” icon in the UI window do?,"The “Gear” icon opens the extension preferences, where you can see and edit extension search paths."
139,What can I find in the README.md file of the created folder?,The README.md file provides more information on the content of the created folder.
140,How can I observe changes in the new extension after making modifications?,Try changing some python files in the new extension and observe changes immediately after saving. You can create new extensions by cloning an existing one and renaming it.
141,Can I find the newly created extension in the list of extensions?,"Yes, you should be able to find the newly created extension in the list of extensions immediately."
142,What does the omni.kit.app subsystem define?,"The omni.kit.app subsystem defines the minimal set of functionality that Kit Core provides, including loop runner entry point, extension manager, scripting support, general message bus, shutdown sequence management, and hang detector."
143,What are the initial wires an extension gets from the external extension point?,"From the external extension point of view, the only wires that an extension gets initially are just the startup and shutdown functions."
144,What is the role of the loop runner in an application?,"The loop runner drives the application loop, pushing update events into corresponding update event streams and pumping the event streams, allowing modular bits and pieces to tick."
145,What is the default implementation of the loop runner?,"The default loop runner is close to the straightforward implementation outlined in the pseudocode, with small additions of rate limiter logic and other minor pieces of maintenance logic."
146,What does the extension manager control?,"The extension manager controls the extensions execution flow, maintains the extension registry, and handles other related tasks."
147,How can Python scripting be set up and managed?,"The Kit Core app sets up Python scripting environment required to support Python extensions and execute custom Python scripts and code snippets. The IAppScripting interface provides a simple interface to this scripting environment, which can be used to execute files and strings, manage script search folders, and subscribe to the event stream that broadcasts scripting events."
148,What is the purpose of the general message bus?,The general message bus is an event stream that can be used by anyone to send and listen to events. It is useful in cases where event stream ownership is inconvenient or when app-wide events are established that can be used by many consumers across all the extensions.
149,How can an event type be derived from a string hash for the message bus?,An event type can be derived from a string hash using functions like carb.events.type_from_string.
150,How does the application handle shutdown requests?,"The application receives shutdown requests via the post-quit queries. Prior to the real shutdown initiation, the post query event will be injected into the shutdown event stream, and consumers subscribed to the event stream will have a chance to request a shutdown request cancellation. If the shutdown is not cancelled, another event will be injected into the shutdown event stream, indicating that the real shutdown is about to start."
151,What does the app core incorporate to detect hangs?,"The app core incorporates a simple hang detector that receives periodic nudges, and if there are no nudges for some defined amount of time, it will notify the user that a hang is detected and can crash the application if the user chooses."
152,Why is the hang detector helpful?,"The hang detector helps generate crash dumps, allowing developers to understand what happened and what the call stack was at the time of the hang."
153,What are the settings that can be tweaked for the hang detector?,"The timeout, if it is enabled, and other things can be tweaked via the settings."
154,What are some important design choices for event streams?,Either multiple event streams with fairly limited numbers of event types served by each or one single event stream serving many different event types.
155,How can you execute your code only on Nth event using transient subscriptions?,"The transient subscription can include a simple counter, so you execute your code only on Nth event, not necessarily on the next one."
156,What is the purpose of the carb::events::IEvents Carbonite interface?,The carb::events::IEvents Carbonite interface is used to provide a means to move data around using the generalized interface in a thread-safe manner and synchronize the logic.
157,How are event consumers able to subscribe to callbacks?,"Subscription functions create the ISubscription class, which usually unsubscribes automatically upon destruction."
158,What are some important recommendations for using the events subsystem?,"The events subsystem is flexible, and there are several recommendations intended to help with frequent use-cases and provide clarifications on specific parts of the events logic."
159,What is the carb.events plugin's goal?,The goal of the carb.events plugin is to provide a means to move data around using the generalized interface in a thread-safe manner and also act as a way to synchronize the logic.
160,What happens when events are popped from the event queue?,"When events are popped from the queue one by one or all at once (pump), deferred callbacks are triggered."
161,What does the omni.kit.app subsystem define?,"The omni.kit.app subsystem defines the minimal set of functionality that Kit Core provides, including loop runner entry point, extension manager, scripting support, general message bus, shutdown sequence management, and hang detector."
162,What are the initial wires an extension gets from the external extension point?,"From the external extension point of view, the only wires that an extension gets initially are just the startup and shutdown functions."
163,What is the role of the loop runner in an application?,"The loop runner drives the application loop, pushing update events into corresponding update event streams and pumping the event streams, allowing modular bits and pieces to tick."
164,What is the purpose of Omniverse Kit?,"Omniverse Kit is the SDK for building Omniverse applications like Create and View. It brings together major components such as USD/Hydra, Omniverse, Carbonite, Omniverse RTX Renderer, Scripting, and a UI Toolkit (omni.ui)."
165,What can developers use Omniverse Kit for?,Developers can use Omniverse Kit to build their own Omniverse applications or extend and modify existing ones using any combination of its major components.
166,What is USD/Hydra?,"USD is the primary Scene Description used by Kit, both for in-memory/authoring/runtime use and as the serialization format. Hydra allows USD to stream its content to any Renderer with a Hydra Scene Delegate."
167,How can USD be accessed in an extension?,USD can be accessed directly via an external shared library or from Python using USD’s own Python bindings.
168,What is Omni.USD?,"Omni.USD is an API written in C++ that sits on top of USD, Kit’s core, and the OmniClient library. It provides application-related services such as Events/Listeners, Selection handling, access to the Omniverse USD Audio subsystem, and more."
169,What does the Omniverse Client Library do?,The Omniverse Client Library is used by Omniverse clients like Kit to communicate with Omniverse servers and local filesystems when loading and saving assets.
170,What functionality does the Carbonite SDK provide?,"The Carbonite SDK provides core functionality for all Omniverse apps, including plugin management, input handling, file access, persistent settings management, audio support, asset loading and management, thread and task management, image loading, localization, synchronization, and basic windowing."
171,How are Carbonite Plugins implemented?,"Carbonite Plugins are shared libraries with C-style interfaces, and most of them have Python bindings accessible from Python."
172,What is the role of the Omniverse RTX Renderer?,"The Omniverse RTX Renderer uses Pixar’s Hydra to interface between USD and RTX, supporting multiple custom Scene delegates, Hydra Engines (GL, Vulkan, DX12), and providing a Viewport with Gizmos and other controls rendering asynchronously at high frame rates."
173,How can Python scripting be used in Kit based apps?,"Python scripting can be used at app startup time by passing cmd arguments, using the Console window, or using the Script Editor Window. It allows access to plugins exposed via Python bindings, USD Python API, Kit Python-only modules, and C++ Carbonite plugins."
174,What is the purpose of Kit Extensions?,Kit Extensions are versioned packages with a runtime enabled/disabled state that build on top of scripting and Carbonite Plugins. They are crucial building blocks for extending Kit functionality and can depend on other extensions.
175,What is omni.ui?,"Omni.ui is the UI framework built on top of Dear Imgui, written in C++ but exposes only a Python API."
176,What components does Omniverse Kit bring together?,"Omniverse Kit brings together USD/Hydra, Omniverse (via Omniverse client library), Carbonite, Omniverse RTX Renderer, Scripting, and a UI Toolkit (omni.ui)."
177,How can developers use Omniverse Kit to build their applications?,"Developers can use any combination of major components like USD/Hydra, Omniverse, Carbonite, Omniverse RTX Renderer, Scripting, and omni.ui to build their own Omniverse applications."
178,What is the primary Scene Description used by Kit?,"USD is the primary Scene Description used by Kit, serving both in-memory/authoring/runtime use and as the serialization format."
179,What are some of the services provided by Omni.USD?,"Omni.USD provides services like Events/Listeners, Selection handling, access to the Omniverse USD Audio subsystem, access to the Omniverse Client Library, and handling of USD Layer."
180,What is the purpose of the Omniverse Client Library?,"The Omniverse Client Library is used for communication between Omniverse clients and Omniverse servers, as well as with local filesystems when loading and saving assets."
181,What features does the Carbonite SDK provide for Omniverse apps?,"The Carbonite SDK provides features such as plugin management, input handling, file access, persistent settings management, audio support, asset loading and management, thread and task management, image loading, localization, synchronization, and basic windowing, all with a single platform independent API."
182,How can Carbonite Plugins be accessed from Python?,"Most Carbonite Plugins have Python bindings, accessible from Python to write your own plugins and make them directly usable from Python."
183,What role does the Omniverse RTX Renderer play?,"The Omniverse RTX Renderer uses Pixar’s Hydra to interface between USD and RTX, supporting multiple custom Scene delegates, Hydra Engines (GL, Vulkan, DX12), providing a Viewport with Gizmos and other controls, and rendering asynchronously at high frame rates."
184,What are the ways to run Python scripts in Kit based apps?,"Python scripts can be run at app startup time by passing cmd arguments, using the Console window, or using the Script Editor Window to access plugins, USD Python API, Kit Python-only modules, and C++ Carbonite plugins."
185,How do Kit Extensions build on top of scripting and Carbonite Plugins?,"Kit Extensions are versioned packages with a runtime enabled/disabled state, providing the highest-level and most crucial building blocks to extend Kit functionality, and can depend on other extensions."
186,What is the purpose of omni.ui?,"Omni.ui is the UI framework built on top of Dear Imgui, written in C++, but it exposes only a Python API for usage."
187,What are the main functionalities provided by the Carbonite SDK?,"The Carbonite SDK provides core functionalities for Omniverse apps, including plugin management, input handling, file access, persistent settings management, audio support, asset loading and management, thread and task management, image loading, localization, synchronization, and basic windowing."
188,What profiler backends are supported in Kit-based applications?,"Kit-based applications support NVTX, ChromeTrace, and Tracy profiler backend implementations."
189,How can you start profiling in Kit-based applications?,"To start profiling, enable the omni.kit.profiler.window extension and press F5. Press F5 again to stop profiling and open the trace in Tracy."
190,What can you do in the profiler window?,"In the profiler window, you can perform additional operations such as enabling the Python profiler, browsing traces, and more."
191,How can you run the Kit-based application with Chrome Trace profiler backend?,"You can run the application with Chrome Trace profiler backend by using specific settings with the kit.exe command, producing a trace file named mytrace.gz that can be opened with the Google Chrome browser."
192,What is Tracy and how can you use it for profiling?,Tracy is a profiler supported in Kit-based applications. You can enable it by enabling the omni.kit.profiler.tracy extension and selecting Profiling->Tracy->Launch and Connect from the menu.
193,How can you enable multiple profiler backends simultaneously?,"You can enable multiple profiler backends by running the Kit-based application with the --/app/profilerBackend setting containing a list of desired backends, such as --/app/profilerBackend=[cpu,tracy]."
194,How can you instrument C++ code for profiling?,"To instrument C++ code for profiling, use macros from the Carbonite Profiler, such as CARB_PROFILE_ZONE. Example usage is provided in the text."
195,How can you instrument Python code for profiling?,"To instrument Python code for profiling, use the Carbonite Profiler bindings, either as a decorator or using explicit begin/end statements. Example usage is provided in the text."
196,What is the Automatic Python Profiler in Kit-based applications?,The Automatic Python Profiler hooks into sys.setprofile() method to profile all function calls in Python code. It automatically reports all events to carb.profiler. It is disabled by default but can be enabled using --enable omni.kit.profile_python.
197,How can you profile the startup time of Kit applications?,"To profile the startup time, you can use the profile_startup.bat shell script provided with Kit. It runs an app with profiling enabled, quits, and opens the trace in Tracy. Pass the path to the app kit file and other arguments to the script."
198,How are extensions published in Kit?,Extensions are published to the registry to be used by downstream apps and extensions. The repo publish_exts tool is used to automate the publishing process.
199,What does the [repo_publish_exts] section of repo.toml do?,"The [repo_publish_exts] section in repo.toml lists which extensions to publish. It includes and excludes extensions among those discovered by Kit, supporting wildcards."
200,How can you automate the publishing process in Continuous Integration (CI)?,"In CI scripts, you can run repo publish_exts -c release (and debug) on every green commit to master, after builds and tests pass. This will publish any new extension version. The version number needs to be incremented for publishing to take effect on already published versions."
201,How can you locally test publishing before actually publishing?,"To test publishing locally without actually publishing, you can use the -n flag with repo publish_exts -c release. This performs a ""dry"" run."
202,What should be considered for extensions with separate packages per platform?,"For extensions with separate packages per platform (e.g., C++, native), publishing needs to be run separately on each platform and for each configuration (debug and release) to satisfy all required dependencies for downstream consumers."
203,What does the extension system verify before publishing?,"The extension system verifies basic things like the presence of the extension icon, correctness of the changelog, presence of name and description fields, etc., before publishing. These checks are recommended but not required."
204,How can you run the verification step without publishing?,"To only run the verification step without publishing, you can use the --verify flag with repo publish_exts -c release."
205,Where can you find other available settings for the publish tool?,"For other available settings of the publish tool, you can look into the repo_tools.toml file, which is part of the kit-sdk package and can be found at: _build/$platform/$config/kit/dev/repo_tools.toml."
